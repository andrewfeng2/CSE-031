Assignment 1
1. What line caused the segmentation fault?

The lined that caused the segmentation fault was line 49.

2. How do you fix the line so it works properly?

In order to fix this line, we add an appersand in front of the input pass by reference instead of by value because scaf requires adress of variable
We change the scanf function which requires the address of the variable where it should store the input, so we need to use the address-of operator &.

3. What is the bug here?


The bug is that the average always comes out to 0, this is because the sum variable is not 
properly being updated in read_values funciton. It is only modifying a local copy of sum instead of the original
variable in main funciton. 

4. How do you fix it?

We fix this bug by passing the adress of sum to read_values using a refernce &sum instead of sum .

Change input=0; into double input=0 to allow for deciaml inputs; and making the sum variable a pointer, next we change 
the scanf to %lf to correctly read double values.

Assignment 2: 
1. Run the program with the following input: “HELLO!” for str1 and “hello!” for str2. Is the output
expected?

Yes the output is as expected it prints out HELLO!hello!.

2. Do not stop the program, enter “HI!” for str1 and “hi!” for str2. Is the output expected? What is
the bug here? Try to fix the program so it will print the output correctly.

The output is not as expected the output was HI!hi!hello! when it was supposed to be HI!hi!. 
The bug is that the new str1 and str2 replaces the original str1. To fix this we need to add a null terminator 
at the end of the appended string. This ensures that it is terminated and prvents leftover charcters 
from previous operations from appearing in future appends. 
s1[s1len + s2len] = '\0';  // Null-terminate the result

3. Do not stop the program, enter “Hello! How are you?” for str1 and “I am fine, thank
you! for str2. Is the output expected? Why do you think this happens? You do not need to fix
this.
The output is not as expected as it is outputs "is thank you!I am fine, thank you!. 
This happens due to buffer overflow and incorrect string termination. The lack of null termination
causes it to read beyond its intended string and parts of the previous memory are stil being read. 



pointers.c, average.c, appendTest.c, arrCopy.c, assignAnswers.txt, and
tpsAnswers.txt