Names: Andrew Feng, Cameron Ngyuen
TPS 1:

1. Download “MIPS_Reference_Sheet” from CatCourses. We will need to refer to this sheet to
complete all the exercises in this lab.

2. Load proc1.s in MARS and study the code. This is similar to compare.s from Lab 06.

3. After assembling the program, study the Text Segment window and see how your source code is
translated into True Assembly Language (Basic) as well as machine code (Code).

4. In true assembly language, every single instruction can be translated into a machine instruction. How
many bits does a machine instruction contain?

It contains 32 bits.

5. To utilize the limited number of bits efficiently, all machine instructions are categorized into different
types (or formats). How many types are there? What are they? Give 2 operations for each type as
examples.

Thhere are three types of instructions in MIPS:
- R-Type: Examples: add, sub
- I-type: Examples: addi, lw
- J-type: Examples: j, jal


6. Now, locate the instruction in line #7 of proc1.s. Let us translate this instruction into machine code.
	addi $s0, $zero, 25

a. What instruction type is this? How many fields does this type of instruction have? What are the
names of these fields?
This is a I-type instruction. It has 4 fileds:
- opcode (6 bits)
- rs (5 bits)
- rt (5 bits)
- immediate (16 bits)

b. Refer to the MIPS sheet, what is the value of the opcode of this instruction in hex? What register
is rs? What is the value of this register in hex? What register is rt? What is the value of this register
in hex? What is the value of immediate in hex?

- opcode= 0x8 (addi)
- rs = $zero = 0x0 
- immediate = 0x19 (25 in decimal)

c. Construct the machine code of line #7 using the values obtained from part b. Write your answer in
both binary and hex formats. You can verify your answer with the Code column in Text Segment window.
Machine Code:
Binary: 20100019 
Hex: 0010 0000 0001 0000 0000 0000 0001 1001

7. Now, let us convert a machine code to a MIPS instruction. Locate address 0x00400010 from the Text
Segment window.
	slt $t0, $s1, $s0
a. What is the machine code at this address in hex? Convert this code into binary.
Machine code: 0x0230402a
Binary: 0000 0010 0011 0000 0100 0000 0010 1010

b. From the binary version of this machine code. What is the instruction type? How can you tell? How
many fields are there in this instruction type? What are the names of these fields?

This is an R-type instruction (opcode=0).
You can tell by the opcode. 
Six Fields: opcode, rs, rt, rd, shamt, funct

c. According to the binary machine code, what is the value of each field in hex?
Field values:
- opcode =0x0
- rs = 0x11 ($s1)
- rt = 0x10 ($s0)
- rd = 0x8 ($t0)
- shamt = 0x0
- funct = 0x2a 

d. Refer to the MIPS sheet, what operation is this instruction? How can you tell? What is the mapping 
of the registers being used in this instruction?

The operation is slt (set less than), mapping is registers: $t0, $1, $s0, you can tell by the opcode. 

e. What is the final MIPS instruction? Is it the same as the Source Column in the Text Segment window?
The final MIPS instruction is slt $t0, $s1, $s0, it matches the source column in the text segment window. 

8. Now, let us take a look at line #17 of proc1.s.
bne $t0, $zero, LESS

a. What format is this instruction?
This is a I type instruciton. This label is an adress which is an immediate. 

b. What are the values of opcode, rs, and rt of this instruction in hex?
- opcode =0x5
- rs=0x8 ($t0)
- rt=0x0 ($zero)

c. What is the name of the target label if it takes the branch? What is the address of this label in hex?
(Hint: you can find it in the Text Segment window.)
LESS label is at 0x0040001c

d. So, do we put this address as the value of the immediate field of the instruction? Why?
No, we don't use absolaute adress, Branch instructions use relative adressing.

e. How do we find the value of the immediate field? What is this value?
Immediate value is the number of words to branch ((target - PC - 4)/4)
immediate = (0x00400020 - (0x00400018 + 4)) / 4
         = (0x00400020 - 0x0040001C) / 4
         = 0x4 / 4
         = 1
Value = 1

f. What is the machine code of this instruction in binary and hex formats? Does your answer match
the Code column in the Text Segment window?
Binary: 0001 0101 0000 0000 0000 0000 0000 0001
Hex: 15000001
Yes it matches the code column in the text segment window. 

9. Finally, let us convert the j instruction in line #20.
j GREQ

a. What format is this instruction? How many fields are there in this format?
J-type instruction with 2 fields:
- opcode (6 bits)
- address (26 bits)

b. What is the opcode of this instruction in hex?
opcode= 0x2 (hex)
binary: 000010

c. To what label and address does this instruction jump?
Jumps to GREQ at 0x00400030

d. How many bits can you use in the address field of the instruction? How can we "squeeze" the
address into this field? What are the reasons behind this approach? What is the value of the
address field in binary?
We have 26 bits for the address field. For J-type instructions, the 26-bit address is created by:
1. Taking the 2 least significant bits of the target address (dropping the 4 most significant bits)
2. Right-shifting by 2 (dropping the last 2 bits since instructions are word-aligned)

For address 0x00400030:
1. Drop 4 most significant bits: 00400030 -> 00400030
2. Right shift by 2: 00400030 -> 00100000
Final 26-bit value: 0000 0001 0000 0000 0000 0000 1100

e. What is the machine code of this instruction in binary and hex? Is it the same as what's in the
Code Column of the Text Segment window?
Binary: 0000 1000 0001 0000 0000 0000 0000 1100
Hex: 0x0810000C (combines opcode 0x2 << 26 with address field)
Yes, it is the same.
