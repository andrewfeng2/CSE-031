TPS: 1.
Names: Andrew Feng, Cameron Nguyen, Paul Choi 
Tutorials:
- https://www.youtube.com/watch?v=3BkEOvI36Ds
- https://www.youtube.com/watch?v=2GV0K9Y2MKA
- https://www.youtube.com/watch?v=r5HQqU_6siA

TPS 2:
1)You compile punishment.c by typing in gcc -g punishment.c or    gcc -g punishment.c -o punish to be more specific.
2) You type in lldb a.out, or lldb, or if you used gcc -g punishment.c -o you type in lldb punish to load it
3) You type in run
4) A breakpoint is a marker you set in the code to pause the program's execution
at a certain line. It allows you to inspet the prgram's state, check variable values etc. 
breakpoint set --line 42. 
5) In order to run it line by line you type in n or step. 
6) You type in p "variable"    ex:  p repetitions, p typo_line, p value
7) You type in continue or c 
8) You type in quit or q 

TPS 3:
1)  There are 4 varibles declared in main. Two of them are pointer *px and *py
2) Garbage values It happens this way because the varibles are unitialized the output will 
show garbage values. 
3) You need to intitalize the values when you declare them, for example you can do int x=0, y=0; and int ar[10]=0
so they start at 0
4)      
printf("Address of x: %p\n", (void*)&x);
printf("Address of y: %p\n", (void*)&y); 

5) 
printf("Value of px: %p, Address of px: %p\n", (void*)px, (void*)&px);
printf("Value of py: %p, Address of py: %p\n", (void*)py, (void*)&py);
6)
 for (int i = 0; i < 10; i++) {
        printf("arr[%d]: %d\n", i, *(arr + i)); // Accessing array using pointer
    }
7) arr points to the first adress of the element. Array names can be treated as pointers
to their first element. 
printf("Address of arr: %p\n", (void*)arr); // Address of the array
printf("Address of first element (arr[0]): %p\n", (void*)&arr[0]); // Address of the first element

8) The adress of array is the same as the pointer adress of arr[0] this makes sense 
because in C, the name of the array (arr) acts as a pointer to its first element.
