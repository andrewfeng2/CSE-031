Names: Andrew Feng, Cameron Nguyen, Amol Gill, Paul Choi, Denis Ergen

TPS (Think-Pair-Share) activity 1: Discuss questions 1 – 12 (25 minutes) while paired with your
classmates assigned by your TA (you will be assigned to groups of 3-4 students) and record your answers in
a text file named tpsAnswers.txt under a section labelled “TPS 1” (
you will continue to use this file
to record your answers to all the TPS questions that follow in the lab handout):

1. Once fib.s is assembled, open the
Execute tab (it should be opened by default after assembled). Two
segments of memory are displayed here: Text Segment and Data Segment. What are the starting
addresses of Text Segment and Data Segment? Give your answers in Hex format.

The starting adress of text segment is 0x00400000
The starting value of data segment is 0x10010000


2. The Text Segment shows you how each actual machine code is stored in the memory (again it is
simulated) and its corresponding MIPS code. Two types of MIPS code are shown here: Basic and Source.
We call the Basic one True Assembly Language, and the Source one MIPS Assembly Language.
From the display, what can you tell about the difference between the two in terms of their relationship
with the machine code? We will cove this topic in future lectures.

True Assembly Language (Basic):
- Corresponds directly to machine code instructions
- Each line of Basic code typically maps to a single machine code instruction
- Uses register numbers instead of symbolic names (e.g., $8 instead of $t0)
- Does not include pseudo-instructions or macros

MIPS Assembly Language (Source):
- Higher-level representation of assembly code
- May use pseudo-instructions that expand into multiple machine code instructions
- Uses symbolic register names (e.g., $t0, $a0) for better readability
- Can include directives and macros that don't directly correspond to machine code


3. Now, let us take a look at the Data Segment. How much difference in bytes are there between 2 address
locations (again, the addresses are in Hex)?

0x20 or 32 in decimal. 

4. For each address location, how many columns are there?
8 columns 

5. What can you tell about the relationship between the address difference and the number of columns at
each address location?

The address difference of 0x20 (32 bytes) between locations corresponds directly to the 8 columns at each address location. Each column represents 4 bytes (32 bits) of data. 
Therefore, 8 columns * 4 bytes per column = 32 bytes, which matches the address difference. 


6. From the source code, how do you create a new variable/label named m and set it to 20?

m:	.word 20

7. Save and assemble your file. At what address is the value of m stored?

0x10010000 second column or 0x10010004

8. Besides numbers, we can also initialize strings for the program to use. Search from the Internet on how
to declare a string named str1 and set it to “I love CSE31!”

str1: .asciiz "I love CSE31!"

9. Insert the declaration of str1 in your code and assemble it. From the Data Segment, we can see that
the string is occupying 3 address locations. At what addresses is str1 stored?

 value(+8):0x10010008  value(+c): 0x1001000c value(+10): 0x10010010


10. str1 is stored as numerical values in the memory. Check the
ASCII box and observe how it is stored.
Does the display of characters agree with what you have learned from Lab 04 about how an array of
characters is stored?

Yes, the string is stored in a sequence of ASCII values with each cahracter occuptying one byte. 
The charcters are stores in contiguous memory locaitons and the string is terminated with a null 
character ('\0') which means ASCII value 0.

11. In order to print str1, we will need to use syscall function. Search the Internet to find out how to
print str1.

la $a0, str1
li $v0, 4
syscall

12. Now let us go back to the program. Search from the Internet to find out what “la $t3, n” does.
What will be the value stored in $t3 after running this instruction? From this we can see that we cannot
use the initialized variables (labels) directly in our MIPS program. We need to use la, then lw to save
the value into a register.

The instruction "la $t3, n" stands for "load address" and it loads the memory address of the label 'n' into register $t3. 
After running this instruction, $t3 will contain the memory address where the variable 'n' is stored, not the actual value of 'n'.

To get the value of 'n', we would need to follow the "la" instruction with a "lw" (load word) instruction:

la $t3, n    


TPS activity 2: Discuss questions 1 – 8 (25 minutes) with your TPS partners in your assigned group and
record your answers in tpsAnswers.txt under a section labelled “TPS 2”:
1. From lectures, we have learned that we can perform different inequality comparisons (<, >, <=, >=) by
using only slt, beq, and bne instructions. Why not having one instruction for each inequality in
MIPS?

This is because MIPS doesn't have seperate instrucitons for each ineqaulity comparison (<,>,<=,>=)
to keep the instruciton set simple and reduce complexity. 

2. Declare a new variable/label (n) and set it to 25.

n: .word 25

3. Insert instructions to declare the following strings:

a. str1: "Less than\n"
    str1: .asciiz "Less than\n"

b. str2: "Less than or equal to\n"
    str2: .asciiz "Less than or equal to\n"

c. str3: "Greater than\n"
    str3: .asciiz "Greater than\n"

d. str4: "Greater than or equal to\n"
    str4: .asciiz "Greater than or equal to\n"

4. Insert instructions to read in an integer from users. Search from the Internet on how to use syscall to
do it.

    li $v0, 5       # syscall code for reading integer
    syscall         # read integer from user input
    move $t0, $v0   # move the input to $t0 for later use

5. Insert code so the program will compare if the user input is less than n. If it is, output “Less than”.

   lw $t1, n       # load word: load value of n into $t1
   slt $t2, $t0, $t1   # set $t2 to 1 if $t0 < $t1, else 0
   beq $t2, $zero, skip1  # Branch if equal: If $t2 == 0 (not less than), skip to label
   li $v0, 4       # syscall code for print string. Set $v0 to 4 
   la $a0, str1    # load address of str1, load address of str1 into $a0
   syscall         # print "Less than"
   skip1:          # skip point if condition not met

6. Insert code so the program will compare if the user input is greater than or equal to n. If it is, output
“Greater than or equal to”.

   slt $t2, $t0, $t1   # set $t2 to 1 if $t0 < $t1, else 0
   bne $t2, $zero, skip2  # skip if less than, IF $t2!=0 (less than), skip to label 'skip2'
   li $v0, 4       # syscall code for print string
   la $a0, str4    # load address of str4 into $a0
   syscall         # print "Greater than or equal to"
   skip2:          # Label: skip point if condition not met

7. Now comment out your code from steps 5 and 6. Insert code so the program will compare if the user
input is greater than n. If it is, output “Greater than”.

    slt $t2, $t1, $t0   # set $t2 to 1 if $t1 < $t0, else 0
    beq $t2, $zero, skip3  # skip if not greater than, if $t2==0 (not greater than), skip to skip3
    li $v0, 4       # syscall code for print string
    la $a0, str3    # load address of str3 into $a0 
    syscall         # print "Greater than"
    skip3:


8. Insert code so the program will compare if the user input is less than or equal to n. If it is, output “Less
than or equal to”.

   slt $t2, $t1, $t0   # set $t2 to 1 if $t1 < $t0, else 0
   bne $t2, $zero, skip4  # skip if greater than, If $t2!=0 (greater than), skip to label
   li $v0, 4       # syscall code for print string, Set $v0 to 4
   la $a0, str2    # load address of str2 into $a0
   syscall         # print "Less than or equal to"
   skip4:          #Label: skip point if condition not met 

Individual assignment 1: 
