Names: Andrew Feng, Cameron Nguyen, Paul Choi 
TPS 1: 
1) Open MemCast.c, compile and run the program. What do you expect the program to print? (%x in
printf allows an integer to be printed in Hex format).

I expect the program to print 2, This due to the fact that four_ints[0] is initialized to 2, 
and it's being printed in hexadecimal format (%x).

2) Before changing the code, what do you expect the program to print if you print four_ints[0]
again at the end of the program?

If you print four_ints[0] again at the end of the progrm I would expect it to print A.

3) Insert a print statement to output four_ints[0] at the end of the program in hex and verify your
answer from (2)

You get 0x44434241 or 44434241

4) Now add a print statement to the program so it will print out four_ints[1] in hex. What does it
print? Are you surprised (or lost) by the results?

It prints 2, I am quite suprised with these results as we only modfied the first four bytes of the
array which corresponds to four_ints[0]

5) Let us study the code carefully and investigate what happened. No, the memory did not go crazy.
a. How many array(s) were allocated in this program?

One array was allocated which was four_ints[4]

b. Are four_ints and four_c pointing to the same location?

Yes they are pointing to the same location, four_c is just a different view (as chars) of the same
memory. Differnet types. 

c. Verify your answer of (b) by printing out the values of four_ints and four_c.
printf("four_ints: %p\n", (void*)four_ints);
printf("four_c: %p\n", (void*)four_c);

6) Write a loop to print out the addresses and values (in Hex) of all the elements of four_ints. What is
the difference in addresses between two consecutive elements? Discuss what this difference means.

for (i = 0; i < 4; i++) {
        printf("four_ints[%d]: address = %p, value = 0x%x\n", 
               i, (void*)&four_ints[i], four_ints[i]);
    }

The difference in addresses between consecutive elements is four bytes, which is the 
size of an int on most systems. If you subtract addresses of four_ints[1] from four_intsp[0] and
so on you get a differnce of 4 bytes or 0x4. The 4 byte difference indicates that int occupies 
4 bytes or 32 bits of memory. 

7) Use a piece of paper to draw the layout of the array horizontally so that the smallest address begins
from the RIGHT-hand-side. Indicate the address and value of each element based on the results of
(6). You can draw it digitally.


8) Now, write a loop to print out the same information for four_c as you did in (6). What is the
difference in addresses between two consecutive elements? Discuss what this difference means.

The differnce between two consecutive elements is one byte. This means that each cahr occupies one
byte of memory and that the array is stored contiguously with each char following the previous one. 

9) Use the same piece of paper (or file) from (7) to draw a similar structure for four_c.


10) By comparing the layout of the array pointed by the two pointers, what do you observe in terms of how
C accesses memory when the index of an array is incremented?

When incrementing index of four_ints, C accesses the memory in 4 byte incrememnts of size int. When incrementing
the index of four_c, C accesses memory in 1 byte incrememnts (size char). The memory address is increased by the 
size of the array's data type. Furthermore, the interpretation of the data at that address depends on the pointer type.
Lastly,t he same memory can be accessed and interpreted in different ways depending on the pointer type used to access it.

TPS 2:
1) Open Array2D.c. This program will create a n x n array of int. Explain what line #8 does.

Line 8 allocates memory for an array of n integer pointers. This creates the first dimension of the 2D array. 
Creates an array of pointers that will later point to the individual rows of the 2D array. 

2) Since every array must be allocated in the memory before it can be used, we need to allocate the rows
one by one. To do this, we need to be able to access the pointers from the first array (pointed by arr).
Assuming i is the index of that array, how do we access the ith value of the array?

To access the ith value of the array arr using pointer notation, you would use *(arr+i). 

3) Without using array notations ([]), insert code to complete allocating all the rows and initialize all
contents to be 0. Your code should work with different values for n. Hint: if j is the index of each
row, how do you access arr[i][j] in pointer notation?

for (i = 0; i < n; i++) {
		*(arr + i) = (int*)malloc(n * sizeof(int));
		for (j = 0; j < n; j++) {
			*(*(arr + i) + j) = 0;
		}
	}



4) To verify whether you have created your array correctly, we need a function to print out the array. The
function printArray has been declared. It takes in both the array to be printed and size of array. Why
do we need to pass the size as an argument?

We need to pass the size as an argument to the printArray funciton because C doesn't keep track of array sizes
automatically. Furthermore, when we pass an array to a funciton, we are passing a pointer to the first element. 
The function needs to know how many elements to print, which is why we pass the size separately.

5) Complete printArray so it prints out the content and layout of an array correctly.

void printArray(int ** array, int size) {
    // (5) Implement your printArr here:
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            printf("%d ", array[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}


6) Now, let us modify the content of the array. Insert code to make the array into a diagonal matrix that
looks like the following (again, do not limit the size to 5):

	for (i = 0; i < n; i++) {
		*(*(arr + i) + i) = i + 1;
	}

7)Call printArray to print out your new array and verify result.
printArray(arr, n);




Individual Assignment 1: Matrix Multiplication
Now we know how 2D arrays work. Let us put them in practical use (you must not use any array notions
[]) in this assignment):

1) Open MatrixMult.c. and define in main() two n x n matrices (arrays) using malloc.
    matA = (int **)malloc(n * sizeof(int *));
	matB = (int **)malloc(n * sizeof(int *));

2) Implement printArray function so you can call it to print a 2D array.

    void printArray(int **arr, int n) {
	
	// Iterates through rows of the matrix
	for (int i = 0; i < n; i++) {
		// Iterates through columns of the matrix
		for (int j = 0; j < n; j++) {
			// Prints each element with a space separator
			printf("%d ", *(*(arr + i) + j));
		}
		// Moves to the next line after printing a row
		printf("\n");
	}
	// Prints an extra newline for better formatting
	printf("\n");
}

3) In main(), call printArray to print out the 2 arrays you have defined in (1).

    printf("Matrix A:\n");
	printArray(matA, n);
	printf("Matrix B:\n");
	printArray(matB, n);

4) Implement matMult so it multiplies the 2 input arrays and return the resulting array.
Pay attention tothe input arguments and return type.

    int** matMult(int **a, int **b, int size) {
        // Allocates memory for the result matrix
        int **result = (int **)malloc(size * sizeof(int *));
        
        // Iterates through rows of the result matrix
        for (int i = 0; i < size; i++) {
            // Allocates memory for each row of the result matrix
            *(result + i) = (int *)malloc(size * sizeof(int));
            
            // Iterates through columns of the result matrix
            for (int j = 0; j < size; j++) {
                // Initializes the current element to 0
                *(*(result + i) + j) = 0;
                
                // Performs dot product of row i from matrix a and column j from matrix b
                for (int k = 0; k < size; k++) {
                    // Accumulates the product of corresponding elements
                    *(*(result + i) + j) += *(*(a + i) + k) * *(*(b + k) + j);
			}
		}
	}
	return result;
}

5) In main(), call matMult to multiply the 2 arrays you have defined in (1).

    matC = matMult(matA, matB, n);


6) In main(), call printArray to print out the resulting array you receive in (5).

    printf("Result Matrix C (A * B):\n");
	printArray(matC, n);

7) You will need to declare any variables that are necessary.

    